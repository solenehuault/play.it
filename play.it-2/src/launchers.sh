# alias calling write_bin() and write_desktop()
# USAGE: write_launcher $app[…]
# NEEDED VARS: (APP_CAT) APP_ID|GAME_ID APP_EXE APP_LIBS APP_NAME|GAME_NAME APP_OPTIONS APP_POSTRUN APP_PRERUN APP_TYPE CACHE_DIRS CACHE_FILES CONFIG_DIRS CONFIG_FILES DATA_DIRS DATA_FILES GAME_ID (LANG) PATH_BIN PATH_DESK PATH_GAME PKG PKG_PATH
# CALLS: write_bin write_dekstop
write_launcher() {
	write_bin $@
	write_desktop $@
}

# write launcher script
# USAGE: write_bin $app[…]
# NEEDED VARS: APP_ID|GAME_ID APP_EXE APP_LIBS APP_OPTIONS APP_POSTRUN APP_PRERUN APP_TYPE CACHE_DIRS CACHE_FILES CONFIG_DIRS CONFIG_FILES DATA_DIRS DATA_FILES GAME_ID (LANG) PATH_BIN PATH_GAME PKG PKG_PATH
# CALLS: liberror testvar write_bin_build_wine write_bin_run_dosbox write_bin_run_native write_bin_run_scummvm write_bin_run_wine write_bin_set_scummvm write_bin_set_wine write_bin_winecfg
# CALLED BY: write_launcher
write_bin() {
	local pkg_path="$(eval printf -- \"\$${PKG}_PATH\")"
	local app
	for app in $@; do
		testvar "$app" 'APP' || liberror 'app' 'write_bin'

		# Get app-specific variables
		local app_id
		if [ -n "$(eval printf -- \"\$${app}_ID\")" ]; then
			app_id="$(eval printf -- \"\$${app}_ID\")"
		else
			app_id="$GAME_ID"
		fi

		local app_type="$(eval printf -- \"\$${app}_TYPE\")"
		if [ "$app_type" != 'scummvm' ]; then
			local app_options="$(eval printf -- \"\$${app}_OPTIONS\")"
			local app_prerun="$(eval printf -- \"\$${app}_PRERUN\")"
			local app_postrun="$(eval printf -- \"\$${app}_POSTRUN\")"

			local app_exe
			if [ -n "$(eval printf -- \"\$${app}_EXE_${PKG#PKG_}\")" ]; then
				app_exe="$(eval printf -- \"\$${app}_EXE_${PKG#PKG_}\")"
			else
				app_exe="$(eval printf -- \"\$${app}_EXE\")"
			fi

			local app_libs
			if [ -n "$(eval printf -- \"\$${app}_LIBS_${PKG#PKG_}\")" ]; then
				app_libs="$(eval printf -- \"\$${app}_LIBS_${PKG#PKG_}\")"
			else
				app_libs="$(eval printf -- \"\$${app}_LIBS\")"
			fi

			if [ "$app_type" = 'native' ]; then
				chmod +x "${pkg_path}${PATH_GAME}/$app_exe"
			fi
		fi

		# Write winecfg launcher for WINE games
		if [ "$app_type" = 'wine' ]; then
			write_bin_winecfg
		fi

		local file="${pkg_path}${PATH_BIN}/$app_id"
		mkdir --parents "${file%/*}"

		# Write launcher headers
		cat > "$file" <<- EOF
		#!/bin/sh
		# script generated by ./play.it $library_version - http://wiki.dotslashplay.it/
		set -o errexit

		EOF

		# Write launcher
		if [ "$app_type" = 'scummvm' ]; then
			write_bin_set_scummvm
		else
			# Set executable, options and libraries
			if [ "$app_id" != "${GAME_ID}_winecfg" ]; then
				cat >> "$file" <<- EOF
				# Set executable file

				APP_EXE='$app_exe'
				APP_OPTIONS="$app_options"
				export LD_LIBRARY_PATH="$app_libs:\$LD_LIBRARY_PATH"

				EOF
			fi

			# Set game path and user-writable files
			cat >> "$file" <<- EOF
			# Set game-specific variables

			GAME_ID='$GAME_ID'
			PATH_GAME='$PATH_GAME'

			CACHE_DIRS='$CACHE_DIRS'
			CACHE_FILES='$CACHE_FILES'

			CONFIG_DIRS='$CONFIG_DIRS'
			CONFIG_FILES='$CONFIG_FILES'

			DATA_DIRS='$DATA_DIRS'
			DATA_FILES='$DATA_FILES'

			EOF

			# Set user-specific directories names and paths
			cat >> "$file" <<- 'EOF'
			# Set prefix name

			[ "$PREFIX_ID" ] || PREFIX_ID="$GAME_ID"

			# Set prefix-specific variables

			[ "$XDG_CACHE_HOME" ] || XDG_CACHE_HOME="$HOME/.cache"
			[ "$XDG_CONFIG_HOME" ] || XDG_CONFIG_HOME="$HOME/.config"
			[ "$XDG_DATA_HOME" ] || XDG_DATA_HOME="$HOME/.local/share"

			PATH_CACHE="$XDG_CACHE_HOME/$PREFIX_ID"
			PATH_CONFIG="$XDG_CONFIG_HOME/$PREFIX_ID"
			PATH_DATA="$XDG_DATA_HOME/games/$PREFIX_ID"
			EOF
			if [ "$app_type" = 'wine' ]; then
				write_bin_set_wine
			else
				cat >> "$file" <<- 'EOF'
				PATH_PREFIX="$XDG_DATA_HOME/play.it/prefixes/$PREFIX_ID"

				EOF
			fi

			# Set generic functions
			cat >> "$file" <<- 'EOF'
			# Set ./play.it functions

			clean_userdir() {
			  cd "$PATH_PREFIX"
			  for file in $2; do
			    if [ -f "$file" ] && [ ! -f "$1/$file" ]; then
			      cp --parents "$file" "$1"
			      rm "$file"
			      ln --symbolic "$(readlink -e "$1/$file")" "$file"
			    fi
			  done
			}

			init_prefix_dirs() {
			  (
			    cd "$1"
			    for dir in $2; do
			      rm --force --recursive "$PATH_PREFIX/$dir"
			      mkdir --parents "$PATH_PREFIX/${dir%/*}"
			      if [ ! -e "$dir" ]; then
			        (
			          cd "$PATH_GAME"
			          cp --parents --recursive "$dir" "$1"
			        )
			      fi
			      ln --symbolic "$(readlink -e "$dir")" "$PATH_PREFIX/$dir"
			    done
			  )
			}

			init_prefix_files() {
			  (
			    cd "$1"
			    find . -type f | while read file; do
			      local file_prefix="$(readlink -e "$PATH_PREFIX/$file")"
			      local file_real="$(readlink -e "$file")"
			      if [ "$file_real" != "$file_prefix" ]; then
			        rm --force "$PATH_PREFIX/$file"
			        mkdir --parents "$PATH_PREFIX/${file%/*}"
			        ln --symbolic "$file_real" "$PATH_PREFIX/$file"
			      fi
			    done
			  )
			}

			init_userdir_dirs() {
			  (
			    cd "$PATH_GAME"
			    for dir in $2; do
			      if [ ! -e "$1/$dir" ] && [ -e "$dir" ]; then
			        cp --parents --recursive "$dir" "$1"
			      else
			        mkdir --parents "$1/$dir"
			      fi
			    done
			  )
			}

			init_userdir_files() {
			  (
			    cd "$PATH_GAME"
			    for file in $2; do
			      if [ ! -e "$1/$file" ] && [ -e "$file" ]; then
			        cp --parents "$file" "$1"
			      fi
			    done
			  )
			}
			EOF

			# Build user-specific directories
			cat >> "$file" <<- 'EOF'

			# Build user-writable directories

			if [ ! -e "$PATH_CACHE" ]; then
			  mkdir --parents "$PATH_CACHE"
			  init_userdir_dirs "$PATH_CACHE" "$CACHE_DIRS"
			  init_userdir_files "$PATH_CACHE" "$CACHE_FILES"
			fi

			if [ ! -e "$PATH_CONFIG" ]; then
			  mkdir --parents "$PATH_CONFIG"
			  init_userdir_dirs "$PATH_CONFIG" "$CONFIG_DIRS"
			  init_userdir_files "$PATH_CONFIG" "$CONFIG_FILES"
			fi

			if [ ! -e "$PATH_DATA" ]; then
			  mkdir --parents "$PATH_DATA"
			  init_userdir_dirs "$PATH_DATA" "$DATA_DIRS"
			  init_userdir_files "$PATH_DATA" "$DATA_FILES"
			fi

			# Build prefix

			EOF

			# Build game prefix
			if [ "$app_type" = 'wine' ]; then
				write_bin_build_wine
			fi
			cat >> "$file" <<- 'EOF'
			if [ ! -e "$PATH_PREFIX" ]; then
			  mkdir --parents "$PATH_PREFIX"
			  cp --force --recursive --symbolic-link --update "$PATH_GAME"/* "$PATH_PREFIX"
			fi
			init_prefix_files "$PATH_CACHE"
			init_prefix_files "$PATH_CONFIG"
			init_prefix_files "$PATH_DATA"
			init_prefix_dirs "$PATH_CACHE" "$CACHE_DIRS"
			init_prefix_dirs "$PATH_CONFIG" "$CONFIG_DIRS"
			init_prefix_dirs "$PATH_DATA" "$DATA_DIRS"

			EOF
		fi

		case $app_type in
			('dosbox')
				write_bin_run_dosbox
			;;
			('native')
				write_bin_run_native
			;;
			('scummvm')
				write_bin_run_scummvm
			;;
			('wine')
				write_bin_run_wine
			;;
		esac

		if [ $app_type != 'scummvm' ]; then
			cat >> "$file" <<- 'EOF'
			clean_userdir "$PATH_CACHE" "$CACHE_FILES"
			clean_userdir "$PATH_CONFIG" "$CONFIG_FILES"
			clean_userdir "$PATH_DATA" "$DATA_FILES"

			exit 0
			EOF
		fi

		sed -i 's/  /\t/g' "$file"
		chmod 755 "$file"
	done
}

# write menu entry
# USAGE: write_desktop $app[…]
# NEEDED VARS: (APP_CAT) APP_ID|GAME_ID APP_NAME|GAME_NAME APP_TYPE (LANG) PATH_DESK PKG PKG_PATH
# CALLS: liberror testvar write_desktop_winecfg
# CALLED BY: write_launcher
write_desktop() {
	local app
	for app in $@; do
		testvar "$app" 'APP' || liberror 'app' 'write_desktop'

		local app_type="$(eval printf -- \"\$${app}_TYPE\")"
		if [ "$winecfg_desktop" != 'done' ] && [ "$app_type" = 'wine' ]; then
			winecfg_desktop='done'
			write_desktop_winecfg
		fi

		local app_id
		if [ -n "$(eval printf -- \"\$${app}_ID\")" ]; then
			app_id="$(eval printf -- \"\$${app}_ID\")"
		else
			app_id="$GAME_ID"
		fi

		local app_name
		if [ -n "$(eval printf -- \"\$${app}_NAME\")" ]; then
			app_name="$(eval printf -- \"\$${app}_NAME\")"
		else
			app_name="$GAME_NAME"
		fi

		local app_cat
		if [ -n "$(eval printf -- \"\$${app}_CAT\")" ]; then
			app_cat="$(eval printf -- \"\$${app}_CAT\")"
		else
			app_cat='Game'
		fi

		local pkg_path="$(eval printf -- \"\$${PKG}_PATH\")"
		local target="${pkg_path}${PATH_DESK}/${app_id}.desktop"
		mkdir --parents "${target%/*}"
		cat > "$target" <<- EOF
		[Desktop Entry]
		Version=1.0
		Type=Application
		Name=$app_name
		Icon=$app_id
		Exec=$app_id
		Categories=$app_cat
		EOF
	done
}

